# HG changeset patch
# Parent 86d6746878f2ed540a027ee4bd105b7d2286d315

diff -r 86d6746878f2 src/cmd/5l/asm.c
--- a/src/cmd/5l/asm.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/asm.c	Sun Jul 21 11:25:50 2013 +0200
@@ -93,12 +93,6 @@
 	return (((uint32)a) & 0xff000000U) | (0x00ffffffU & (uint32)(a + b));
 }
 
-Sym *
-lookuprel(void)
-{
-	return lookup(".rel", 0);
-}
-
 void
 adddynrela(Sym *rel, Sym *s, Reloc *r)
 {
@@ -276,9 +270,12 @@
 		break;
 
 	case D_TLS:
-		if(r->siz == 4)
-			LPUT(R_ARM_TLS_LE32 | elfsym<<8);
-		else
+		if(r->siz == 4) {
+			if(flag_shared)
+				LPUT(R_ARM_TLS_IE32 | elfsym<<8);
+			else
+				LPUT(R_ARM_TLS_LE32 | elfsym<<8);
+		} else
 			return -1;
 		break;
 	}
@@ -966,6 +963,8 @@
 			rel->add = p->to.offset;
 			if(rel->sym == gmsym) {
 				rel->type = D_TLS;
+				if(flag_shared)
+					rel->add += pc - p->pcrel->pc - 8 - rel->siz;
 				rel->xadd = rel->add;
 				rel->xsym = rel->sym;
 			} else if(flag_shared) {
diff -r 86d6746878f2 src/cmd/5l/l.h
--- a/src/cmd/5l/l.h	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/l.h	Sun Jul 21 11:25:50 2013 +0200
@@ -183,7 +183,6 @@
 	Reloc*	r;
 	int32	nr;
 	int32	maxr;
-	int 	rel_ro;
 };
 
 #define SIGNINTERN	(1729*325*1729)
@@ -293,7 +292,6 @@
 EXTERN	int32	INITRND;		/* data round above text location */
 EXTERN	int32	INITTEXT;		/* text location */
 EXTERN	char*	INITENTRY;		/* entry point */
-EXTERN	char*	LIBINITENTRY;		/* shared library entry point */
 EXTERN	int32	autosize;
 EXTERN	Auto*	curauto;
 EXTERN	Auto*	curhist;
diff -r 86d6746878f2 src/cmd/5l/noop.c
--- a/src/cmd/5l/noop.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/noop.c	Sun Jul 21 11:25:50 2013 +0200
@@ -174,15 +174,31 @@
 						//
 						// MOV $runtime.tlsgm+tlsoffset(SB), REGTMP
 						// ADD REGTMP, <reg>
+						//
+						// In shared mode, runtime.tlsgm is relocated with
+						// R_ARM_TLS_IE32 and runtime.tlsgm(SB) will point
+						// to the GOT entry containing the TLS offset.
+						//
+						// MOV runtime.tlsgm(SB), REGTMP
+						// ADD REGTMP, <reg>
+						// SUB -tlsoffset, <reg>
+						//
+						// The SUB compensates for tlsoffset
+						// used in runtime.save_gm and runtime.load_gm.
 						q = p;
 						p = appendp(p);
 						p->as = AMOVW;
 						p->scond = 14;
 						p->reg = NREG;
-						p->from.type = D_CONST;
+						if(flag_shared) {
+							p->from.type = D_OREG;
+							p->from.offset = 0;
+						} else {
+							p->from.type = D_CONST;
+							p->from.offset = tlsoffset;
+						}
 						p->from.sym = gmsym;
 						p->from.name = D_EXTERN;
-						p->from.offset = tlsoffset;
 						p->to.type = D_REG;
 						p->to.reg = REGTMP;
 						p->to.offset = 0;
@@ -196,6 +212,18 @@
 						p->to.type = D_REG;
 						p->to.reg = (q->to.offset & 0xf000) >> 12;
 						p->to.offset = 0;
+
+						if(flag_shared) {
+							p = appendp(p);
+							p->as = ASUB;
+							p->scond = 14;
+							p->reg = NREG;
+							p->from.type = D_CONST;
+							p->from.offset = -tlsoffset;
+							p->to.type = D_REG;
+							p->to.reg = (q->to.offset & 0xf000) >> 12;
+							p->to.offset = 0;
+						}
 					}
 				}
 			}
diff -r 86d6746878f2 src/cmd/5l/obj.c
--- a/src/cmd/5l/obj.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/obj.c	Sun Jul 21 11:25:50 2013 +0200
@@ -81,7 +81,6 @@
 	INITDAT = -1;
 	INITRND = -1;
 	INITENTRY = 0;
-	LIBINITENTRY = 0;
 	linkmode = LinkAuto;
 	nuxiinit();
 	
@@ -126,17 +125,20 @@
 	flagstr("r", "dir1:dir2:...: set ELF dynamic linker search path", &rpath);
 	flagcount("race", "enable race detector", &flag_race);
 	flagcount("s", "disable symbol table", &debug['s']);
+	flagcount("shared", "generate shared object (implies -linkmode external)", &flag_shared);
 	flagstr("tmpdir", "leave temporary files in this directory", &tmpdir);
 	flagcount("u", "reject unsafe packages", &debug['u']);
 	flagcount("v", "print link trace", &debug['v']);
 	flagcount("w", "disable DWARF generation", &debug['w']);
-	flagcount("shared", "generate shared object", &flag_shared);
 	
 	flagparse(&argc, &argv, usage);
 
 	if(argc != 1)
 		usage();
 
+	if(flag_shared)
+		linkmode = LinkExternal;
+
 	mywhatsys();
 
 	if(HEADTYPE == -1)
diff -r 86d6746878f2 src/cmd/5l/pass.c
--- a/src/cmd/5l/pass.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/pass.c	Sun Jul 21 11:25:50 2013 +0200
@@ -246,6 +246,13 @@
 			p->cond = q;
 		}
 	}
+	if(flag_shared) {
+		s = lookup("init_array", 0);
+		s->type = SINITARR;
+		s->reachable = 1;
+		s->hide = 1;
+		addaddr(s, lookup(INITENTRY, 0));
+	}
 
 	for(cursym = textp; cursym != nil; cursym = cursym->next) {
 		for(p = cursym->text; p != P; p = p->link) {
diff -r 86d6746878f2 src/cmd/5l/span.c
--- a/src/cmd/5l/span.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/5l/span.c	Sun Jul 21 11:25:50 2013 +0200
@@ -577,10 +577,7 @@
 			if(s == S)
 				break;
 			instoffset = 0;	// s.b. unused but just in case
-			if(flag_shared)
-				return C_LCONADDR;
-			else
-				return C_LCON;
+			return C_LCONADDR;
 
 		case D_AUTO:
 			instoffset = autosize + a->offset;
diff -r 86d6746878f2 src/cmd/6a/a.y
--- a/src/cmd/6a/a.y	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6a/a.y	Sun Jul 21 11:25:50 2013 +0200
@@ -518,6 +518,15 @@
 		$$.scale = $8;
 		checkscale($$.scale);
 	}
+|	con '(' LLREG ')' '(' LSREG '*' con ')'
+	{
+		$$ = nullgen;
+		$$.type = D_INDIR+$3;
+		$$.offset = $1;
+		$$.index = $6;
+		$$.scale = $8;
+		checkscale($$.scale);
+	}
 |	'(' LLREG ')'
 	{
 		$$ = nullgen;
diff -r 86d6746878f2 src/cmd/6a/y.tab.c
--- a/src/cmd/6a/y.tab.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6a/y.tab.c	Sun Jul 21 11:25:50 2013 +0200
@@ -435,9 +435,9 @@
 /* YYNNTS -- Number of nonterminals.  */
 #define YYNNTS  42
 /* YYNRULES -- Number of rules.  */
-#define YYNRULES  136
+#define YYNRULES  137
 /* YYNRULES -- Number of states.  */
-#define YYNSTATES  273
+#define YYNSTATES  277
 
 /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
 #define YYUNDEFTOK  2
@@ -496,10 +496,10 @@
      219,   222,   225,   227,   229,   231,   233,   238,   241,   244,
      246,   248,   250,   252,   254,   256,   258,   261,   264,   267,
      270,   273,   278,   284,   288,   290,   292,   294,   299,   304,
-     309,   316,   326,   330,   334,   340,   349,   351,   358,   364,
-     372,   373,   376,   379,   381,   383,   385,   387,   389,   392,
-     395,   398,   402,   404,   407,   411,   416,   418,   422,   426,
-     430,   434,   438,   443,   448,   452,   456
+     309,   316,   326,   336,   340,   344,   350,   359,   361,   368,
+     374,   382,   383,   386,   389,   391,   393,   395,   397,   399,
+     402,   405,   408,   412,   414,   417,   421,   426,   428,   432,
+     436,   440,   444,   448,   453,   458,   462,   466
 };
 
 /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
@@ -537,7 +537,8 @@
       91,    -1,    95,    -1,    95,    52,    37,    53,    -1,    95,
       52,    44,    53,    -1,    95,    52,    38,    53,    -1,    95,
       52,    37,    10,    95,    53,    -1,    95,    52,    37,    53,
-      52,    37,    10,    95,    53,    -1,    52,    37,    53,    -1,
+      52,    37,    10,    95,    53,    -1,    95,    52,    37,    53,
+      52,    38,    10,    95,    53,    -1,    52,    37,    53,    -1,
       52,    44,    53,    -1,    52,    37,    10,    95,    53,    -1,
       52,    37,    53,    52,    37,    10,    95,    53,    -1,    92,
       -1,    92,    52,    37,    10,    95,    53,    -1,    45,    93,
@@ -566,10 +567,10 @@
      342,   346,   350,   351,   354,   355,   358,   364,   373,   382,
      387,   392,   397,   402,   407,   412,   418,   426,   432,   443,
      449,   455,   461,   467,   475,   476,   479,   485,   491,   497,
-     503,   512,   521,   526,   531,   539,   549,   553,   562,   569,
-     578,   581,   585,   591,   592,   596,   599,   600,   604,   608,
-     612,   616,   622,   627,   632,   637,   644,   645,   649,   653,
-     657,   661,   665,   669,   673,   677,   681
+     503,   512,   521,   530,   535,   540,   548,   558,   562,   571,
+     578,   587,   590,   594,   600,   601,   605,   608,   609,   613,
+     617,   621,   625,   631,   636,   641,   646,   653,   654,   658,
+     662,   666,   670,   674,   678,   682,   686,   690
 };
 #endif
 
@@ -621,10 +622,10 @@
       83,    83,    83,    83,    84,    84,    85,    85,    85,    86,
       86,    86,    86,    86,    86,    86,    87,    88,    88,    88,
       88,    88,    88,    88,    89,    89,    90,    90,    90,    90,
-      90,    90,    90,    90,    90,    90,    91,    91,    92,    92,
-      93,    93,    93,    94,    94,    94,    95,    95,    95,    95,
-      95,    95,    96,    96,    96,    96,    97,    97,    97,    97,
-      97,    97,    97,    97,    97,    97,    97
+      90,    90,    90,    90,    90,    90,    90,    91,    91,    92,
+      92,    93,    93,    93,    94,    94,    94,    95,    95,    95,
+      95,    95,    95,    96,    96,    96,    96,    97,    97,    97,
+      97,    97,    97,    97,    97,    97,    97,    97
 };
 
 /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
@@ -640,10 +641,10 @@
        2,     2,     1,     1,     1,     1,     4,     2,     2,     1,
        1,     1,     1,     1,     1,     1,     2,     2,     2,     2,
        2,     4,     5,     3,     1,     1,     1,     4,     4,     4,
-       6,     9,     3,     3,     5,     8,     1,     6,     5,     7,
-       0,     2,     2,     1,     1,     1,     1,     1,     2,     2,
-       2,     3,     1,     2,     3,     4,     1,     3,     3,     3,
-       3,     3,     4,     4,     3,     3,     3
+       6,     9,     9,     3,     3,     5,     8,     1,     6,     5,
+       7,     0,     2,     2,     1,     1,     1,     1,     1,     2,
+       2,     2,     3,     1,     2,     3,     4,     1,     3,     3,
+       3,     3,     3,     4,     4,     3,     3,     3
 };
 
 /* YYDEFACT[STATE-NAME] -- Default reduction number in state STATE-NUM.
@@ -654,31 +655,31 @@
        2,     3,     1,     0,     0,    33,     0,     0,     0,     0,
        0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
        0,     0,    60,     0,     0,     0,     0,     9,     4,     0,
-      11,    34,    14,     0,     0,   116,    79,    81,    84,    80,
-      82,    85,    83,   110,   117,     0,     0,     0,    15,    40,
-      66,    67,    94,    95,   106,    96,     0,    16,    74,    38,
-      75,    17,     0,    18,     0,     0,   110,   110,     0,    22,
+      11,    34,    14,     0,     0,   117,    79,    81,    84,    80,
+      82,    85,    83,   111,   118,     0,     0,     0,    15,    40,
+      66,    67,    94,    95,   107,    96,     0,    16,    74,    38,
+      75,    17,     0,    18,     0,     0,   111,   111,     0,    22,
       48,    68,    72,    73,    69,    96,    20,     0,    34,    49,
-      50,    23,   110,     0,     0,    19,    42,     0,     0,    21,
+      50,    23,   111,     0,     0,    19,    42,     0,     0,    21,
        0,    30,     0,    31,     0,    24,     0,    25,     0,    26,
       56,    27,     0,    28,     0,    29,    61,    32,     0,     7,
-       0,     5,     0,    10,   119,   118,     0,     0,     0,     0,
-      39,     0,     0,   126,     0,   120,     0,     0,     0,    90,
+       0,     5,     0,    10,   120,   119,     0,     0,     0,     0,
+      39,     0,     0,   127,     0,   121,     0,     0,     0,    90,
       89,     0,    88,    87,    37,     0,     0,    70,    71,    77,
       78,    47,     0,     0,    77,    41,     0,     0,     0,     0,
        0,     0,     0,    55,     0,     0,     0,     0,    12,     0,
-      13,   110,   111,   112,     0,     0,   102,   103,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   121,     0,
+      13,   111,   112,   113,     0,     0,   103,   104,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,   122,     0,
        0,     0,     0,    93,     0,     0,    35,    36,     0,     0,
       43,     0,    45,     0,    62,     0,    64,    51,    53,    57,
-       0,     0,    65,     8,     6,     0,   115,   113,   114,     0,
-       0,     0,   136,   135,   134,     0,     0,   127,   128,   129,
-     130,   131,     0,     0,    97,    99,    98,     0,    91,    76,
-       0,     0,   122,    86,     0,     0,     0,     0,     0,     0,
-       0,   108,   104,     0,   132,   133,     0,     0,     0,    92,
-      44,   123,     0,    46,    63,    52,    54,    58,    59,     0,
-       0,   107,   100,     0,     0,   124,   109,     0,     0,   125,
-     105,     0,   101
+       0,     0,    65,     8,     6,     0,   116,   114,   115,     0,
+       0,     0,   137,   136,   135,     0,     0,   128,   129,   130,
+     131,   132,     0,     0,    97,    99,    98,     0,    91,    76,
+       0,     0,   123,    86,     0,     0,     0,     0,     0,     0,
+       0,   109,   105,     0,   133,   134,     0,     0,     0,    92,
+      44,   124,     0,    46,    63,    52,    54,    58,    59,     0,
+       0,   108,   100,     0,     0,     0,   125,   110,     0,     0,
+       0,   126,   106,     0,     0,   101,   102
 };
 
 /* YYDEFGOTO[NTERM-NUM].  */
@@ -698,41 +699,41 @@
 {
      -94,    15,   -94,   218,   -28,   -25,   264,   285,   285,   340,
      163,     2,   319,    97,   415,   415,   285,   285,   285,   285,
-     306,   -24,   -24,   285,   -17,   -14,     4,   -94,   -94,    36,
+     306,   -24,   -24,   285,   -17,   -14,     4,   -94,   -94,    48,
      -94,   -94,   -94,   481,   481,   -94,   -94,   -94,   -94,   -94,
      -94,   -94,   -94,    19,   -94,   340,   399,   481,   -94,   -94,
-     -94,   -94,   -94,   -94,    34,    45,   385,   -94,   -94,    47,
-     -94,   -94,    48,   -94,    52,   374,    19,    56,   243,   -94,
-     -94,   -94,   -94,   -94,   -94,    59,   -94,    99,   340,   -94,
-     -94,   -94,    56,   138,   481,   -94,   -94,    66,    63,   -94,
-      69,   -94,    73,   -94,    74,   -94,    76,   -94,    77,   -94,
-      79,   -94,    80,   -94,    81,   -94,   -94,   -94,    83,   -94,
-     481,   -94,   481,   -94,   -94,   -94,   119,   481,   481,    88,
-     -94,    -1,    92,   -94,    84,   -94,   113,    23,   426,   -94,
-     -94,   433,   -94,   -94,   -94,   340,   285,   -94,   -94,    88,
-     -94,   -94,    75,   481,   -94,   -94,   138,   120,   440,   444,
+     -94,   -94,   -94,   -94,    46,    47,   385,   -94,   -94,    52,
+     -94,   -94,    59,   -94,    60,   374,    19,    56,   243,   -94,
+     -94,   -94,   -94,   -94,   -94,    63,   -94,   106,   340,   -94,
+     -94,   -94,    56,   138,   481,   -94,   -94,    69,    72,   -94,
+      74,   -94,    76,   -94,    77,   -94,    79,   -94,    80,   -94,
+      81,   -94,    83,   -94,    89,   -94,   -94,   -94,    94,   -94,
+     481,   -94,   481,   -94,   -94,   -94,   119,   481,   481,    98,
+     -94,    -1,   100,   -94,    84,   -94,   117,    23,   426,   -94,
+     -94,   433,   -94,   -94,   -94,   340,   285,   -94,   -94,    98,
+     -94,   -94,    75,   481,   -94,   -94,   138,   122,   440,   444,
      285,   340,   340,   340,   340,   340,   285,   218,   393,   218,
-     393,    56,   -94,   -94,   -15,   481,   101,   -94,   481,   481,
-     481,   150,   155,   481,   481,   481,   481,   481,   -94,   147,
-       0,   116,   122,   -94,   474,   123,   -94,   -94,   133,   136,
-     -94,     7,   -94,   140,   -94,   141,   -94,   146,   148,   -94,
-     160,   165,   -94,   -94,   -94,   137,   -94,   -94,   -94,   144,
-     145,   180,   533,   541,   548,   481,   481,    58,    58,   -94,
-     -94,   -94,   481,   481,   168,   -94,   -94,   170,   -94,   -94,
-     -24,   189,   215,   -94,   171,   -24,   192,   188,   481,   306,
-     219,   -94,   -94,   245,    33,    33,   203,   204,   222,   -94,
-     -94,   251,   229,   -94,   -94,   -94,   -94,   -94,   -94,   209,
-     481,   -94,   -94,   256,   236,   -94,   -94,   216,   481,   -94,
-     -94,   217,   -94
+     393,    56,   -94,   -94,   -15,   481,   105,   -94,   481,   481,
+     481,   156,   162,   481,   481,   481,   481,   481,   -94,   165,
+       0,   123,   133,   -94,   474,   134,   -94,   -94,   136,   140,
+     -94,     7,   -94,   141,   -94,   143,   -94,   148,   149,   -94,
+     147,   160,   -94,   -94,   -94,   164,   -94,   -94,   -94,   167,
+     168,   180,   533,   541,   548,   481,   481,    58,    58,   -94,
+     -94,   -94,   481,   481,   171,   -94,   -94,   172,   -94,   -94,
+     -24,   192,   217,   -94,   175,   -24,   219,   216,   481,   306,
+     220,   -94,   -94,   247,    33,    33,   205,   208,    41,   -94,
+     -94,   253,   234,   -94,   -94,   -94,   -94,   -94,   -94,   215,
+     481,   -94,   -94,   259,   260,   239,   -94,   -94,   221,   481,
+     481,   -94,   -94,   223,   224,   -94,   -94
 };
 
 /* YYPGOTO[NTERM-NUM].  */
 static const yytype_int16 yypgoto[] =
 {
-     -94,   -94,   -94,   -43,   -94,   -94,   -94,   259,   -94,   -94,
-     -94,   262,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
-     -94,   -94,   -94,   -94,   -94,   -94,    26,   208,    32,   -11,
-      -9,    43,    -8,    64,    -2,    -6,     1,   -60,   -94,   -10,
+     -94,   -94,   -94,   -43,   -94,   -94,   -94,   266,   -94,   -94,
+     -94,   273,   -94,   -94,   -94,   -94,   -94,   -94,   -94,   -94,
+     -94,   -94,   -94,   -94,   -94,   -94,    26,   229,    32,   -11,
+      -9,    57,    -8,    71,    -2,    -6,     1,   -60,   -94,   -10,
      -94,   -93
 };
 
@@ -749,29 +750,29 @@
       62,   173,   174,   175,   176,   177,   133,    43,    94,    96,
       98,   100,   166,   224,   112,   108,   137,   132,    75,    72,
      180,   181,    74,   138,   117,   118,    73,   182,   175,   176,
-     177,   120,   145,    88,   123,   212,   213,   214,    90,    92,
-     217,   218,   219,   220,   221,   113,   126,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   127,   134,   135,
-     123,   205,   123,   136,   120,    33,    34,   162,   163,   188,
-     143,   142,   180,   181,   203,   147,   204,   146,   115,   182,
-     148,   123,   244,   245,   149,   150,   161,   151,   152,    35,
-     153,   154,   155,   189,   156,   190,    88,   178,   193,   195,
-     164,   194,    82,    67,    44,   167,    33,    34,    83,    84,
-     179,    56,    47,   211,   188,   210,   215,   222,   123,   123,
-     123,   186,   216,   123,   123,   123,   123,   123,   187,   225,
-      35,    33,    34,    65,   115,   226,   228,   197,   198,   199,
-     200,   201,   196,    82,    67,    44,   229,   230,   202,   240,
-      84,   234,   235,    47,   236,    35,   237,   241,   242,    36,
+     177,   120,   145,    88,   123,   212,   213,   214,   263,   264,
+     217,   218,   219,   220,   221,    90,    92,   168,   169,   170,
+     171,   172,   173,   174,   175,   176,   177,   113,   126,   127,
+     123,   205,   123,   134,   120,    33,    34,   162,   163,   188,
+     135,   136,   180,   181,   203,   142,   204,   143,   115,   182,
+     146,   123,   244,   245,   147,   148,   161,   149,   150,    35,
+     151,   152,   153,   189,   154,   190,    88,   178,   193,   195,
+     155,   194,    82,    67,    44,   156,    33,    34,    83,    84,
+     164,    56,    47,   167,   179,   210,   188,   211,   123,   123,
+     123,   186,   215,   123,   123,   123,   123,   123,   187,   216,
+      35,    33,    34,    65,   115,   222,   225,   197,   198,   199,
+     200,   201,   196,    82,    67,    44,   226,   228,   202,   229,
+      84,   230,   234,    47,   235,    35,   236,   237,   238,    36,
       37,    38,    39,    40,    41,   123,   123,    42,    66,    67,
-      44,   238,   246,   247,    68,    46,   239,   243,    47,     4,
-     248,   251,   250,   249,   252,   191,   256,   254,   257,   255,
+      44,   239,   246,   247,    68,    46,   240,   243,    47,     4,
+     241,   242,   250,   248,   251,   249,   252,   254,   257,   191,
      258,     5,     6,     7,     8,     9,    10,    11,    12,    13,
       14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
-     267,    33,    34,    65,   259,   260,   261,   262,   271,   263,
-     264,   265,   266,    24,    25,    26,   268,    27,   269,   270,
-     272,    79,    33,    34,    80,    35,   141,   253,     0,    36,
-      37,    38,    39,    40,    41,     0,     0,    42,    66,    67,
-      44,     0,     0,    33,    34,    46,    35,     0,    47,     0,
+     268,    33,    34,    65,   256,   259,   255,   260,   261,   273,
+     274,   262,   265,    24,    25,    26,   266,    27,   267,   269,
+     270,   271,    33,    34,   272,    35,   275,   276,    79,    36,
+      37,    38,    39,    40,    41,    80,     0,    42,    66,    67,
+      44,   253,     0,    33,    34,    46,    35,   141,    47,     0,
       36,    37,    38,    39,    40,    41,     0,     0,    42,    43,
        0,    44,     0,     0,     0,    45,    46,    35,     0,    47,
        0,    36,    37,    38,    39,    40,    41,    33,    34,    42,
@@ -816,29 +817,29 @@
        8,     8,     9,    10,    11,    12,    56,    45,    16,    17,
       18,    19,    53,    53,    50,    23,    65,    56,    68,    68,
       37,    38,    68,    65,     8,     9,    68,    44,    10,    11,
-      12,    45,    83,    83,    84,   168,   169,   170,    14,    15,
-     173,   174,   175,   176,   177,    49,    52,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    52,    51,    51,
+      12,    45,    83,    83,    84,   168,   169,   170,    37,    38,
+     173,   174,   175,   176,   177,    14,    15,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    49,    52,    52,
      110,   161,   112,    51,    78,     8,     9,   117,   118,    34,
-      11,    52,    37,    38,   157,    52,   159,    51,   128,    44,
-      51,   131,   215,   216,    51,    51,     7,    51,    51,    32,
+      51,    51,    37,    38,   157,    52,   159,    11,   128,    44,
+      51,   131,   215,   216,    52,    51,     7,    51,    51,    32,
       51,    51,    51,   143,    51,   146,   146,    53,   148,   149,
-      52,   149,    45,    46,    47,    53,     8,     9,    51,    52,
-      37,    54,    55,    52,    34,   165,     6,    10,   168,   169,
-     170,   135,     7,   173,   174,   175,   176,   177,   136,    53,
-      32,     8,     9,    10,   184,    53,    53,   151,   152,   153,
-     154,   155,   150,    45,    46,    47,    53,    51,   156,    52,
-      52,    51,    51,    55,    48,    32,    48,    53,    53,    36,
+      51,   149,    45,    46,    47,    51,     8,     9,    51,    52,
+      52,    54,    55,    53,    37,   165,    34,    52,   168,   169,
+     170,   135,     6,   173,   174,   175,   176,   177,   136,     7,
+      32,     8,     9,    10,   184,    10,    53,   151,   152,   153,
+     154,   155,   150,    45,    46,    47,    53,    53,   156,    53,
+      52,    51,    51,    55,    51,    32,    48,    48,    51,    36,
       37,    38,    39,    40,    41,   215,   216,    44,    45,    46,
-      47,    51,   222,   223,    51,    52,    51,    37,    55,     1,
-      52,    32,   230,    53,     9,    54,    38,   235,   238,    37,
+      47,    51,   222,   223,    51,    52,    52,    37,    55,     1,
+      53,    53,   230,    52,    32,    53,     9,   235,   238,    54,
      239,    13,    14,    15,    16,    17,    18,    19,    20,    21,
       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
-     260,     8,     9,    10,    35,    10,    53,    53,   268,    37,
-       9,    32,    53,    45,    46,    47,    10,    49,    32,    53,
-      53,    12,     8,     9,    12,    32,    68,   234,    -1,    36,
-      37,    38,    39,    40,    41,    -1,    -1,    44,    45,    46,
-      47,    -1,    -1,     8,     9,    52,    32,    -1,    55,    -1,
+     260,     8,     9,    10,    38,    35,    37,    10,    53,   269,
+     270,    53,     9,    45,    46,    47,    32,    49,    53,    10,
+      10,    32,     8,     9,    53,    32,    53,    53,    12,    36,
+      37,    38,    39,    40,    41,    12,    -1,    44,    45,    46,
+      47,   234,    -1,     8,     9,    52,    32,    68,    55,    -1,
       36,    37,    38,    39,    40,    41,    -1,    -1,    44,    45,
       -1,    47,    -1,    -1,    -1,    51,    52,    32,    -1,    55,
       -1,    36,    37,    38,    39,    40,    41,     8,     9,    44,
@@ -898,8 +899,8 @@
       51,     9,    32,    96,    51,    51,    48,    48,    51,    51,
       52,    53,    53,    37,    97,    97,    95,    95,    52,    53,
       88,    32,     9,    87,    88,    37,    38,    95,    86,    35,
-      10,    53,    53,    37,     9,    32,    53,    95,    10,    32,
-      53,    95,    53
+      10,    53,    53,    37,    38,     9,    32,    53,    95,    10,
+      10,    32,    53,    95,    95,    53,    53
 };
 
 #define yyerrok		(yyerrstatus = 0)
@@ -2542,24 +2543,38 @@
 #line 522 "a.y"
     {
 		(yyval.gen) = nullgen;
+		(yyval.gen).type = D_INDIR+(yyvsp[(3) - (9)].lval);
+		(yyval.gen).offset = (yyvsp[(1) - (9)].lval);
+		(yyval.gen).index = (yyvsp[(6) - (9)].lval);
+		(yyval.gen).scale = (yyvsp[(8) - (9)].lval);
+		checkscale((yyval.gen).scale);
+	}
+    break;
+
+  case 103:
+
+/* Line 1806 of yacc.c  */
+#line 531 "a.y"
+    {
+		(yyval.gen) = nullgen;
 		(yyval.gen).type = D_INDIR+(yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 103:
+  case 104:
 
 /* Line 1806 of yacc.c  */
-#line 527 "a.y"
+#line 536 "a.y"
     {
 		(yyval.gen) = nullgen;
 		(yyval.gen).type = D_INDIR+D_SP;
 	}
     break;
 
-  case 104:
+  case 105:
 
 /* Line 1806 of yacc.c  */
-#line 532 "a.y"
+#line 541 "a.y"
     {
 		(yyval.gen) = nullgen;
 		(yyval.gen).type = D_INDIR+D_NONE;
@@ -2569,10 +2584,10 @@
 	}
     break;
 
-  case 105:
+  case 106:
 
 /* Line 1806 of yacc.c  */
-#line 540 "a.y"
+#line 549 "a.y"
     {
 		(yyval.gen) = nullgen;
 		(yyval.gen).type = D_INDIR+(yyvsp[(2) - (8)].lval);
@@ -2582,19 +2597,19 @@
 	}
     break;
 
-  case 106:
+  case 107:
 
 /* Line 1806 of yacc.c  */
-#line 550 "a.y"
+#line 559 "a.y"
     {
 		(yyval.gen) = (yyvsp[(1) - (1)].gen);
 	}
     break;
 
-  case 107:
+  case 108:
 
 /* Line 1806 of yacc.c  */
-#line 554 "a.y"
+#line 563 "a.y"
     {
 		(yyval.gen) = (yyvsp[(1) - (6)].gen);
 		(yyval.gen).index = (yyvsp[(3) - (6)].lval);
@@ -2603,10 +2618,10 @@
 	}
     break;
 
-  case 108:
+  case 109:
 
 /* Line 1806 of yacc.c  */
-#line 563 "a.y"
+#line 572 "a.y"
     {
 		(yyval.gen) = nullgen;
 		(yyval.gen).type = (yyvsp[(4) - (5)].lval);
@@ -2615,10 +2630,10 @@
 	}
     break;
 
-  case 109:
+  case 110:
 
 /* Line 1806 of yacc.c  */
-#line 570 "a.y"
+#line 579 "a.y"
     {
 		(yyval.gen) = nullgen;
 		(yyval.gen).type = D_STATIC;
@@ -2627,212 +2642,212 @@
 	}
     break;
 
-  case 110:
+  case 111:
 
 /* Line 1806 of yacc.c  */
-#line 578 "a.y"
+#line 587 "a.y"
     {
 		(yyval.lval) = 0;
 	}
     break;
 
-  case 111:
+  case 112:
 
 /* Line 1806 of yacc.c  */
-#line 582 "a.y"
+#line 591 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 112:
+  case 113:
 
 /* Line 1806 of yacc.c  */
-#line 586 "a.y"
+#line 595 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 114:
+  case 115:
 
 /* Line 1806 of yacc.c  */
-#line 593 "a.y"
+#line 602 "a.y"
     {
 		(yyval.lval) = D_AUTO;
 	}
     break;
 
-  case 117:
+  case 118:
 
 /* Line 1806 of yacc.c  */
-#line 601 "a.y"
+#line 610 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (1)].sym)->value;
 	}
     break;
 
-  case 118:
+  case 119:
 
 /* Line 1806 of yacc.c  */
-#line 605 "a.y"
+#line 614 "a.y"
     {
 		(yyval.lval) = -(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 119:
+  case 120:
 
 /* Line 1806 of yacc.c  */
-#line 609 "a.y"
+#line 618 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 120:
+  case 121:
 
 /* Line 1806 of yacc.c  */
-#line 613 "a.y"
+#line 622 "a.y"
     {
 		(yyval.lval) = ~(yyvsp[(2) - (2)].lval);
 	}
     break;
 
-  case 121:
+  case 122:
 
 /* Line 1806 of yacc.c  */
-#line 617 "a.y"
+#line 626 "a.y"
     {
 		(yyval.lval) = (yyvsp[(2) - (3)].lval);
 	}
     break;
 
-  case 122:
+  case 123:
 
 /* Line 1806 of yacc.c  */
-#line 623 "a.y"
+#line 632 "a.y"
     {
 		(yyval.lval) = ((yyvsp[(1) - (1)].lval) & 0xffffffffLL) +
 			((vlong)ArgsSizeUnknown << 32);
 	}
     break;
 
-  case 123:
+  case 124:
 
 /* Line 1806 of yacc.c  */
-#line 628 "a.y"
+#line 637 "a.y"
     {
 		(yyval.lval) = (-(yyvsp[(2) - (2)].lval) & 0xffffffffLL) +
 			((vlong)ArgsSizeUnknown << 32);
 	}
     break;
 
-  case 124:
+  case 125:
 
 /* Line 1806 of yacc.c  */
-#line 633 "a.y"
+#line 642 "a.y"
     {
 		(yyval.lval) = ((yyvsp[(1) - (3)].lval) & 0xffffffffLL) +
 			(((yyvsp[(3) - (3)].lval) & 0xffffLL) << 32);
 	}
     break;
 
-  case 125:
+  case 126:
 
 /* Line 1806 of yacc.c  */
-#line 638 "a.y"
+#line 647 "a.y"
     {
 		(yyval.lval) = (-(yyvsp[(2) - (4)].lval) & 0xffffffffLL) +
 			(((yyvsp[(4) - (4)].lval) & 0xffffLL) << 32);
 	}
     break;
 
-  case 127:
+  case 128:
 
 /* Line 1806 of yacc.c  */
-#line 646 "a.y"
+#line 655 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) + (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 128:
+  case 129:
 
 /* Line 1806 of yacc.c  */
-#line 650 "a.y"
+#line 659 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) - (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 129:
+  case 130:
 
 /* Line 1806 of yacc.c  */
-#line 654 "a.y"
+#line 663 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) * (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 130:
+  case 131:
 
 /* Line 1806 of yacc.c  */
-#line 658 "a.y"
+#line 667 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) / (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 131:
+  case 132:
 
 /* Line 1806 of yacc.c  */
-#line 662 "a.y"
+#line 671 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) % (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 132:
+  case 133:
 
 /* Line 1806 of yacc.c  */
-#line 666 "a.y"
+#line 675 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) << (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 133:
+  case 134:
 
 /* Line 1806 of yacc.c  */
-#line 670 "a.y"
+#line 679 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (4)].lval) >> (yyvsp[(4) - (4)].lval);
 	}
     break;
 
-  case 134:
+  case 135:
 
 /* Line 1806 of yacc.c  */
-#line 674 "a.y"
+#line 683 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) & (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 135:
+  case 136:
 
 /* Line 1806 of yacc.c  */
-#line 678 "a.y"
+#line 687 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) ^ (yyvsp[(3) - (3)].lval);
 	}
     break;
 
-  case 136:
+  case 137:
 
 /* Line 1806 of yacc.c  */
-#line 682 "a.y"
+#line 691 "a.y"
     {
 		(yyval.lval) = (yyvsp[(1) - (3)].lval) | (yyvsp[(3) - (3)].lval);
 	}
@@ -2841,7 +2856,7 @@
 
 
 /* Line 1806 of yacc.c  */
-#line 2845 "y.tab.c"
+#line 2860 "y.tab.c"
       default: break;
     }
   /* User semantic actions sometimes alter yychar, and that requires
diff -r 86d6746878f2 src/cmd/6l/asm.c
--- a/src/cmd/6l/asm.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6l/asm.c	Sun Jul 21 11:25:50 2013 +0200
@@ -99,12 +99,6 @@
 static void addpltsym(Sym*);
 static void addgotsym(Sym*);
 
-Sym *
-lookuprel(void)
-{
-	return lookup(".rela", 0);
-}
-
 void
 adddynrela(Sym *rela, Sym *s, Reloc *r)
 {
@@ -312,9 +306,12 @@
 		break;
 	
 	case D_TLS:
-		if(r->siz == 4)
-			VPUT(R_X86_64_TPOFF32 | (uint64)elfsym<<32);
-		else
+		if(r->siz == 4) {
+			if(flag_shared)
+				VPUT(R_X86_64_GOTTPOFF | (uint64)elfsym<<32);
+			else
+				VPUT(R_X86_64_TPOFF32 | (uint64)elfsym<<32);
+		} else
 			return -1;
 		break;		
 	}
diff -r 86d6746878f2 src/cmd/6l/l.h
--- a/src/cmd/6l/l.h	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6l/l.h	Sun Jul 21 11:25:50 2013 +0200
@@ -187,7 +187,6 @@
 	Reloc*	r;
 	int32	nr;
 	int32	maxr;
-	int 	rel_ro;
 };
 struct	Optab
 {
@@ -329,7 +328,6 @@
 EXTERN	int64	INITTEXT;
 EXTERN	int64	INITDAT;
 EXTERN	char*	INITENTRY;		/* entry point */
-EXTERN	char*	LIBINITENTRY;		/* shared library entry point */
 EXTERN	char*	pcstr;
 EXTERN	Auto*	curauto;
 EXTERN	Auto*	curhist;
diff -r 86d6746878f2 src/cmd/6l/obj.c
--- a/src/cmd/6l/obj.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6l/obj.c	Sun Jul 21 11:25:50 2013 +0200
@@ -82,7 +82,6 @@
 	INITDAT = -1;
 	INITRND = -1;
 	INITENTRY = 0;
-	LIBINITENTRY = 0;
 	linkmode = LinkAuto;
 	nuxiinit();
 
@@ -119,7 +118,7 @@
 	flagstr("r", "dir1:dir2:...: set ELF dynamic linker search path", &rpath);
 	flagcount("race", "enable race detector", &flag_race);
 	flagcount("s", "disable symbol table", &debug['s']);
-	flagcount("shared", "generate shared object", &flag_shared);
+	flagcount("shared", "generate shared object (implies -linkmode external)", &flag_shared);
 	flagstr("tmpdir", "leave temporary files in this directory", &tmpdir);
 	flagcount("u", "reject unsafe packages", &debug['u']);
 	flagcount("v", "print link trace", &debug['v']);
@@ -140,6 +139,9 @@
 	if(linkmode == LinkAuto && strcmp(getgoextlinkenabled(), "0") == 0)
 		linkmode = LinkInternal;
 
+	if(flag_shared)
+		linkmode = LinkExternal;
+
 	switch(HEADTYPE) {
 	default:
 		if(linkmode == LinkAuto)
@@ -365,7 +367,7 @@
 		adrgotype = zsym(pn, f, h);
 	s = a->sym;
 	t = a->type;
-	if(t == D_INDIR+D_GS)
+	if(t == D_INDIR+D_GS || a->index == D_GS)
 		a->offset += tlsoffset;
 	if(t != D_AUTO && t != D_PARAM) {
 		if(s && adrgotype)
diff -r 86d6746878f2 src/cmd/6l/pass.c
--- a/src/cmd/6l/pass.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6l/pass.c	Sun Jul 21 11:25:50 2013 +0200
@@ -271,7 +271,7 @@
 {
 	int32 c;
 	Prog *p, *q;
-	Sym *s;
+	Sym *s, *gmsym;
 	int32 vexit;
 
 	if(debug['v'])
@@ -282,6 +282,17 @@
 		Bprint(&bso, "%5.2f patch\n", cputime());
 	Bflush(&bso);
 
+	if(flag_shared) {
+		s = lookup("init_array", 0);
+		s->type = SINITARR;
+		s->reachable = 1;
+		s->hide = 1;
+		addaddr(s, lookup(INITENTRY, 0));
+	}
+
+	gmsym = lookup("runtime.tlsgm", 0);
+	if(linkmode != LinkExternal)
+		gmsym->reachable = 0;
 	s = lookup("exit", 0);
 	vexit = s->value;
 	for(cursym = textp; cursym != nil; cursym = cursym->next)
@@ -317,6 +328,59 @@
 				p->from.type = D_INDIR+D_FS;
 			if(p->to.type == D_INDIR+D_GS)
 				p->to.type = D_INDIR+D_FS;
+			if(p->from.index == D_GS)
+				p->from.index = D_FS;
+			if(p->to.index == D_GS)
+				p->to.index = D_FS;
+		}
+		if(!flag_shared) {
+			// Convert g() or m() accesses of the form
+			//   op n(reg)(GS*1), reg
+			// to
+			//   op n(GS*1), reg
+			if(p->from.index == D_FS || p->from.index == D_GS) {
+				p->from.type = D_INDIR + p->from.index;
+				p->from.index = D_NONE;
+			}
+			// Convert g() or m() accesses of the form
+			//   op reg, n(reg)(GS*1)
+			// to
+			//   op reg, n(GS*1)
+			if(p->to.index == D_FS || p->to.index == D_GS) {
+				p->to.type = D_INDIR + p->to.index;
+				p->to.index = D_NONE;
+			}
+			// Convert get_tls access of the form
+			//   op runtime.tlsgm(SB), reg
+			// to
+			//   NOP
+			if(gmsym != S && p->from.sym == gmsym) {
+				p->as = ANOP;
+				p->from.type = D_NONE;
+				p->to.type = D_NONE;
+				p->from.sym = nil;
+				p->to.sym = nil;
+				continue;
+			}
+		} else {
+			// Convert TLS reads of the form
+			//   op n(GS), reg
+			// to
+			//   MOVQ $runtime.tlsgm(SB), reg
+			//   op n(reg)(GS*1), reg
+			if((p->from.type == D_INDIR+D_FS || p->from.type == D_INDIR + D_GS) && p->to.type >= D_AX && p->to.type <= D_DI) {
+				q = appendp(p);
+				q->to = p->to;
+				q->as = p->as;
+				q->from.type = D_INDIR+p->to.type;
+				q->from.index = p->from.type - D_INDIR;
+				q->from.scale = 1;
+				q->from.offset = p->from.offset;
+				p->as = AMOVQ;
+				p->from.type = D_EXTERN;
+				p->from.sym = gmsym;
+				p->from.offset = 0;
+			}
 		}
 		if(p->as == ACALL || (p->as == AJMP && p->to.type != D_BRANCH) || (p->as == ARET && p->to.sym != nil)) {
 			s = p->to.sym;
@@ -411,7 +475,10 @@
 	int32 autoffset, deltasp;
 	int a, pcsize;
 	uint32 moreconst1, moreconst2, i;
+	Sym *gmsym;
 
+
+	gmsym = lookup("runtime.tlsgm", 0);
 	for(i=0; i<nelem(morename); i++) {
 		symmorestack[i] = lookup(morename[i], 0);
 		if(symmorestack[i]->type != STEXT)
@@ -443,6 +510,14 @@
 			diag("nosplit func likely to overflow stack");
 
 		if(!(p->from.scale & NOSPLIT)) {
+			if(flag_shared) {
+				// Load TLS offset with MOVQ $runtime.tlsgm(SB), CX
+				p = appendp(p);
+				p->as = AMOVQ;
+				p->from.type = D_EXTERN;
+				p->from.sym = gmsym;
+				p->to.type = D_CX;
+			}
 			p = appendp(p);	// load g into CX
 			p->as = AMOVQ;
 			if(HEADTYPE == Hlinux || HEADTYPE == Hfreebsd
@@ -451,6 +526,11 @@
 				p->from.type = D_INDIR+D_FS;
 			else
 				p->from.type = D_INDIR+D_GS;
+			if(flag_shared) {
+				// Add TLS offset stored in CX
+				p->from.index = p->from.type - D_INDIR;
+				p->from.type = D_INDIR + D_CX;
+			}
 			p->from.offset = tlsoffset+0;
 			p->to.type = D_CX;
 			if(HEADTYPE == Hwindows) {
diff -r 86d6746878f2 src/cmd/6l/span.c
--- a/src/cmd/6l/span.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/6l/span.c	Sun Jul 21 11:25:50 2013 +0200
@@ -358,6 +358,18 @@
 	case D_INDIR+D_GS:
 		return 0x65;
 	}
+	switch(a->index) {
+	case D_CS:
+		return 0x2e;
+	case D_DS:
+		return 0x3e;
+	case D_ES:
+		return 0x26;
+	case D_FS:
+		return 0x64;
+	case D_GS:
+		return 0x65;
+	}
 	return 0;
 }
 
@@ -735,15 +747,20 @@
 			diag("need reloc for %D", a);
 			errorexit();
 		}
-		if(flag_shared)
-			r->type = D_PCREL;
-		else
-			r->type = D_ADDR;
 		r->siz = 4;	// TODO: 8 for external symbols
 		r->off = -1;	// caller must fill in
 		r->sym = s;
 		r->add = v;
 		v = 0;
+		if(flag_shared) {
+			if(s->type == STLSBSS) {
+				r->xadd = r->add - r->siz;
+				r->type = D_TLS;
+				r->xsym = s;
+			} else
+				r->type = D_PCREL;
+		} else
+			r->type = D_ADDR;
 	}
 	return v;
 }
@@ -760,7 +777,7 @@
 	v = a->offset;
 	t = a->type;
 	rel.siz = 0;
-	if(a->index != D_NONE) {
+	if(a->index != D_NONE && a->index != D_FS && a->index != D_GS) {
 		if(t < D_INDIR) { 
 			switch(t) {
 			default:
diff -r 86d6746878f2 src/cmd/8l/asm.c
--- a/src/cmd/8l/asm.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/8l/asm.c	Sun Jul 21 11:25:50 2013 +0200
@@ -95,12 +95,6 @@
 static void	addpltsym(Sym*);
 static void	addgotsym(Sym*);
 
-Sym *
-lookuprel(void)
-{
-	return lookup(".rel", 0);
-}
-
 void
 adddynrela(Sym *rela, Sym *s, Reloc *r)
 {
diff -r 86d6746878f2 src/cmd/8l/l.h
--- a/src/cmd/8l/l.h	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/8l/l.h	Sun Jul 21 11:25:50 2013 +0200
@@ -169,7 +169,6 @@
 	Reloc*	r;
 	int32	nr;
 	int32	maxr;
-	int 	rel_ro;
 };
 struct	Optab
 {
@@ -285,7 +284,6 @@
 EXTERN	int32	INITTEXT;
 EXTERN	int32	INITDAT;
 EXTERN	char*	INITENTRY;		/* entry point */
-EXTERN	char*	LIBINITENTRY;		/* shared library entry point */
 EXTERN	char*	pcstr;
 EXTERN	Auto*	curauto;
 EXTERN	Auto*	curhist;
diff -r 86d6746878f2 src/cmd/8l/obj.c
--- a/src/cmd/8l/obj.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/8l/obj.c	Sun Jul 21 11:25:50 2013 +0200
@@ -89,7 +89,6 @@
 	INITDAT = -1;
 	INITRND = -1;
 	INITENTRY = 0;
-	LIBINITENTRY = 0;
 	linkmode = LinkAuto;
 	nuxiinit();
 
diff -r 86d6746878f2 src/cmd/cgo/out.go
--- a/src/cmd/cgo/out.go	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/cgo/out.go	Sun Jul 21 11:25:50 2013 +0200
@@ -477,7 +477,7 @@
 
 	// Gcc wrapper unpacks the C argument struct
 	// and calls the actual C function.
-	fmt.Fprintf(fgcc, "void\n")
+	fmt.Fprintf(fgcc, "__attribute__ ((visibility (\"hidden\"))) void\n")
 	fmt.Fprintf(fgcc, "_cgo%s%s(void *v)\n", cPrefix, n.Mangle)
 	fmt.Fprintf(fgcc, "{\n")
 	if n.AddError {
diff -r 86d6746878f2 src/cmd/dist/buildruntime.c
--- a/src/cmd/dist/buildruntime.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/dist/buildruntime.c	Sun Jul 21 11:25:50 2013 +0200
@@ -162,15 +162,19 @@
 		"#define	m(r) 8(GS)\n"
 		"#define	procid(r) 16(GS)\n"
 	},
+	// The TLS accessors here are defined here to use initial exec model.
+	// If the linker is not outputting a shared library, it will reduce
+	// the TLS accessors to the local exec model, effectively removing
+	// get_tls().
 	{"amd64", "",
 		"// The offsets 0 and 8 are known to:\n"
 		"//	../../cmd/6l/pass.c:/D_GS\n"
 		"//	cgo/gcc_linux_amd64.c:/^threadentry\n"
 		"//	cgo/gcc_darwin_amd64.c:/^threadentry\n"
 		"//\n"
-		"#define	get_tls(r)\n"
-		"#define	g(r) 0(GS)\n"
-		"#define	m(r) 8(GS)\n"
+		"#define	get_tls(r) MOVQ runtime·tlsgm(SB), r\n"
+		"#define	g(r) 0(r)(GS*1)\n"
+		"#define	m(r) 8(r)(GS*1)\n"
 	},
 	
 	{"arm", "",
diff -r 86d6746878f2 src/cmd/ld/data.c
--- a/src/cmd/ld/data.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/data.c	Sun Jul 21 11:25:50 2013 +0200
@@ -307,8 +307,6 @@
 dynrelocsym(Sym *s)
 {
 	Reloc *r;
-	Sym *rel;
-	Sym *got;
 	
 	if(HEADTYPE == Hwindows) {
 		Sym *rel, *targ;
@@ -345,22 +343,9 @@
 		return;
 	}
 
-	got = rel = nil;
-	if(flag_shared) {
-		rel = lookuprel();
-		got = lookup(".got", 0);
-	}
-	s->rel_ro = 0;
 	for(r=s->r; r<s->r+s->nr; r++) {
 		if(r->sym != S && r->sym->type == SDYNIMPORT || r->type >= 256)
 			adddynrel(s, r);
-		if(flag_shared && r->sym != S && s->type != SDYNIMPORT && r->type == D_ADDR
-				&& (s == got || s->type == SDATA || s->type == SGOSTRING || s->type == STYPE || s->type == SRODATA)) {
-			// Create address based RELATIVE relocation
-			adddynrela(rel, s, r);
-			if(s->type < SNOPTRDATA)
-				s->rel_ro = 1;
-		}
 	}
 }
 
@@ -1101,12 +1086,6 @@
 	}
 	*l = nil;
 
-	if(flag_shared) {
-		for(s=datap; s != nil; s = s->next) {
-			if(s->rel_ro)
-				s->type = SDATARELRO;
-		}
-	}
 	datap = listsort(datap, datcmp, offsetof(Sym, next));
 
 	/*
@@ -1140,12 +1119,12 @@
 
 	/* pointer-free data */
 	sect = addsection(&segdata, ".noptrdata", 06);
-	sect->align = maxalign(s, SDATARELRO-1);
+	sect->align = maxalign(s, SINITARR-1);
 	datsize = rnd(datsize, sect->align);
 	sect->vaddr = datsize;
 	lookup("noptrdata", 0)->sect = sect;
 	lookup("enoptrdata", 0)->sect = sect;
-	for(; s != nil && s->type < SDATARELRO; s = s->next) {
+	for(; s != nil && s->type < SINITARR; s = s->next) {
 		datsize = aligndatsize(datsize, s);
 		s->sect = sect;
 		s->type = SDATA;
@@ -1154,18 +1133,15 @@
 	}
 	sect->len = datsize - sect->vaddr;
 
-	/* dynamic relocated rodata */
+	/* shared library initializer */
 	if(flag_shared) {
-		sect = addsection(&segdata, ".data.rel.ro", 06);
-		sect->align = maxalign(s, SDATARELRO);
+		sect = addsection(&segdata, ".init_array", 06);
+		sect->align = maxalign(s, SINITARR);
 		datsize = rnd(datsize, sect->align);
 		sect->vaddr = datsize;
-		lookup("datarelro", 0)->sect = sect;
-		lookup("edatarelro", 0)->sect = sect;
-		for(; s != nil && s->type == SDATARELRO; s = s->next) {
+		for(; s != nil && s->type == SINITARR; s = s->next) {
 			datsize = aligndatsize(datsize, s);
 			s->sect = sect;
-			s->type = SDATA;
 			s->value = datsize - sect->vaddr;
 			growdatsize(&datsize, s);
 		}
@@ -1180,7 +1156,7 @@
 	lookup("data", 0)->sect = sect;
 	lookup("edata", 0)->sect = sect;
 	for(; s != nil && s->type < SBSS; s = s->next) {
-		if(s->type == SDATARELRO) {
+		if(s->type == SINITARR) {
 			cursym = s;
 			diag("unexpected symbol type %d", s->type);
 		}
@@ -1425,7 +1401,7 @@
 void
 address(void)
 {
-	Section *s, *text, *data, *rodata, *symtab, *pclntab, *noptr, *bss, *noptrbss, *datarelro;
+	Section *s, *text, *data, *rodata, *symtab, *pclntab, *noptr, *bss, *noptrbss;
 	Section *typelink;
 	Sym *sym, *sub;
 	uvlong va;
@@ -1475,7 +1451,6 @@
 	noptr = nil;
 	bss = nil;
 	noptrbss = nil;
-	datarelro = nil;
 	for(s=segdata.sect; s != nil; s=s->next) {
 		vlen = s->len;
 		if(s->next)
@@ -1491,8 +1466,6 @@
 			bss = s;
 		if(strcmp(s->name, ".noptrbss") == 0)
 			noptrbss = s;
-		if(strcmp(s->name, ".data.rel.ro") == 0)
-			datarelro = s;
 	}
 	segdata.filelen = bss->vaddr - segdata.vaddr;
 
@@ -1518,10 +1491,6 @@
 	xdefine("erodata", SRODATA, rodata->vaddr + rodata->len);
 	xdefine("typelink", SRODATA, typelink->vaddr);
 	xdefine("etypelink", SRODATA, typelink->vaddr + typelink->len);
-	if(datarelro != nil) {
-		xdefine("datarelro", SRODATA, datarelro->vaddr);
-		xdefine("edatarelro", SRODATA, datarelro->vaddr + datarelro->len);
-	}
 
 	sym = lookup("gcdata", 0);
 	xdefine("egcdata", SRODATA, symaddr(sym) + sym->size);
diff -r 86d6746878f2 src/cmd/ld/elf.c
--- a/src/cmd/ld/elf.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/elf.c	Sun Jul 21 11:25:50 2013 +0200
@@ -905,8 +905,6 @@
 	addstring(shstrtab, ".elfdata");
 	addstring(shstrtab, ".rodata");
 	addstring(shstrtab, ".typelink");
-	if(flag_shared)
-		addstring(shstrtab, ".data.rel.ro");
 	addstring(shstrtab, ".gosymtab");
 	addstring(shstrtab, ".gopclntab");
 	
@@ -936,6 +934,14 @@
 		addstring(shstrtab, ".note.GNU-stack");
 	}
 
+	if(flag_shared) {
+		addstring(shstrtab, ".init_array");
+		if(thechar == '6')
+			addstring(shstrtab, ".rela.init_array");
+		else
+			addstring(shstrtab, ".rel.init_array");
+	}
+
 	if(!debug['s']) {
 		addstring(shstrtab, ".symtab");
 		addstring(shstrtab, ".strtab");
@@ -1064,13 +1070,6 @@
 		
 		elfwritedynent(s, DT_DEBUG, 0);
 
-		if(flag_shared) {
-			Sym *init_sym = lookup(LIBINITENTRY, 0);
-			if(init_sym->type != STEXT)
-				diag("entry not text: %s", init_sym->name);
-			elfwritedynentsym(s, DT_INIT, init_sym);
-		}
-
 		// Do not write DT_NULL.  elfdynhash will finish it.
 	}
 }
@@ -1469,9 +1468,7 @@
 	eh->ident[EI_DATA] = ELFDATA2LSB;
 	eh->ident[EI_VERSION] = EV_CURRENT;
 
-	if(flag_shared)
-		eh->type = ET_DYN;
-	else if(linkmode == LinkExternal)
+	if(linkmode == LinkExternal)
 		eh->type = ET_REL;
 	else
 		eh->type = ET_EXEC;
diff -r 86d6746878f2 src/cmd/ld/elf.h
--- a/src/cmd/ld/elf.h	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/elf.h	Sun Jul 21 11:25:50 2013 +0200
@@ -569,6 +569,7 @@
 #define	R_ARM_GOT_PREL		96
 #define	R_ARM_GNU_VTENTRY	100
 #define	R_ARM_GNU_VTINHERIT	101
+#define	R_ARM_TLS_IE32		107
 #define	R_ARM_TLS_LE32		108
 #define	R_ARM_RSBREL32		250
 #define	R_ARM_THM_RPC22		251
diff -r 86d6746878f2 src/cmd/ld/go.c
--- a/src/cmd/ld/go.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/go.c	Sun Jul 21 11:25:50 2013 +0200
@@ -499,6 +499,9 @@
 			local = expandpkg(local, pkg);
 			s = lookup(local, 0);
 
+			if(flag_shared && s == lookup("main", 0))
+				continue;
+
 			// export overrides import, for openbsd/cgo.
 			// see issue 4878.
 			if(s->dynimplib != nil) {
@@ -680,8 +683,6 @@
 		Bprint(&bso, "%5.2f deadcode\n", cputime());
 
 	mark(lookup(INITENTRY, 0));
-	if(flag_shared)
-		mark(lookup(LIBINITENTRY, 0));
 	for(i=0; i<nelem(markextra); i++)
 		mark(lookup(markextra[i], 0));
 
diff -r 86d6746878f2 src/cmd/ld/lib.c
--- a/src/cmd/ld/lib.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/lib.c	Sun Jul 21 11:25:50 2013 +0200
@@ -119,17 +119,14 @@
 	}
 
 	if(INITENTRY == nil) {
-		INITENTRY = mal(strlen(goarch)+strlen(goos)+10);
-		sprint(INITENTRY, "_rt0_%s_%s", goarch, goos);
+		INITENTRY = mal(strlen(goarch)+strlen(goos)+20);
+		if(!flag_shared) {
+			sprint(INITENTRY, "_rt0_%s_%s", goarch, goos);
+		} else {
+			sprint(INITENTRY, "_rt0_%s_%s_lib", goarch, goos);
+		}
 	}
 	lookup(INITENTRY, 0)->type = SXREF;
-	if(flag_shared) {
-		if(LIBINITENTRY == nil) {
-			LIBINITENTRY = mal(strlen(goarch)+strlen(goos)+20);
-			sprint(LIBINITENTRY, "_rt0_%s_%s_lib", goarch, goos);
-		}
-		lookup(LIBINITENTRY, 0)->type = SXREF;
-	}
 }
 
 void
@@ -310,6 +307,12 @@
 	int i, w, x;
 	Sym *s, *gmsym;
 
+	if(flag_shared) {
+		s = lookup("runtime.islibrary", 0);
+		s->dupok = 1;
+		adduint8(s, 1);
+	}
+
 	loadinternal("runtime");
 	if(thechar == '5')
 		loadinternal("math");
@@ -357,13 +360,15 @@
 				} else
 					s->type = 0;
 			}
-	} else if(linkmode == LinkExternal) {
-		gmsym = lookup("runtime.tlsgm", 0);
-		gmsym->type = STLSBSS;
-		gmsym->size = 2*PtrSize;
-		gmsym->hide = 1;
+	} 
+	gmsym = lookup("runtime.tlsgm", 0);
+	gmsym->type = STLSBSS;
+	gmsym->size = 2*PtrSize;
+	gmsym->hide = 1;
+	if(linkmode == LinkExternal)
 		gmsym->reachable = 1;
-	}
+	else
+		gmsym->reachable = 0;
 	
 	// Now that we know the link mode, trim the dynexp list.
 	x = CgoExportDynamic;
@@ -675,7 +680,7 @@
 		p = strchr(p + 1, ' ');
 	}
 
-	argv = malloc((10+nhostobj+nldflag+c)*sizeof argv[0]);
+	argv = malloc((13+nhostobj+nldflag+c)*sizeof argv[0]);
 	argc = 0;
 	if(extld == nil)
 		extld = "gcc";
@@ -702,6 +707,10 @@
 	if(iself && AssumeGoldLinker)
 		argv[argc++] = "-Wl,--rosegment";
 
+	if(flag_shared) {
+		argv[argc++] = "-Wl,-Bsymbolic";
+		argv[argc++] = "-shared";
+	}
 	argv[argc++] = "-o";
 	argv[argc++] = outfile;
 	
diff -r 86d6746878f2 src/cmd/ld/lib.h
--- a/src/cmd/ld/lib.h	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/lib.h	Sun Jul 21 11:25:50 2013 +0200
@@ -55,7 +55,7 @@
 	SMACHO,	/* Mach-O __nl_symbol_ptr */
 	SMACHOGOT,
 	SNOPTRDATA,
-	SDATARELRO,
+	SINITARR,
 	SDATA,
 	SWINDOWS,
 	SBSS,
@@ -224,7 +224,6 @@
 void	usage(void);
 void	adddynrel(Sym*, Reloc*);
 void	adddynrela(Sym*, Sym*, Reloc*);
-Sym*	lookuprel(void);
 void	ldobj1(Biobuf *f, char*, int64 len, char *pn);
 void	ldobj(Biobuf*, char*, int64, char*, char*, int);
 void	ldelf(Biobuf*, char*, int64, char*);
diff -r 86d6746878f2 src/cmd/ld/symtab.c
--- a/src/cmd/ld/symtab.c	Sun Jul 21 10:57:01 2013 +0200
+++ b/src/cmd/ld/symtab.c	Sun Jul 21 11:25:50 2013 +0200
@@ -469,10 +469,6 @@
 	xdefine("etypelink", SRODATA, 0);
 	xdefine("rodata", SRODATA, 0);
 	xdefine("erodata", SRODATA, 0);
-	if(flag_shared) {
-		xdefine("datarelro", SDATARELRO, 0);
-		xdefine("edatarelro", SDATARELRO, 0);
-	}
 	xdefine("noptrdata", SNOPTRDATA, 0);
 	xdefine("enoptrdata", SNOPTRDATA, 0);
 	xdefine("data", SDATA, 0);
