# HG changeset patch
# Parent 7fb1d28d575fd1e8ac5e302b77537a479f16c5c3

diff -r 7fb1d28d575f src/cmd/go/build.go
--- a/src/cmd/go/build.go	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/cmd/go/build.go	Sat Jun 29 10:51:01 2013 +0200
@@ -1803,7 +1803,19 @@
 		case "windows":
 			a = append(a, "-mthreads")
 		default:
-			a = append(a, "-pthread")
+			isAndroid := 0
+			for _, v := range buildContext.BuildTags {
+				if v == "android" {
+					isAndroid = 1
+					break
+				}
+			}
+			if isAndroid != 1 {
+				isAndroid = -1
+			}
+			if isAndroid < 0 {
+				a = append(a, "-pthread")
+			}
 		}
 	}
 
diff -r 7fb1d28d575f src/pkg/os/file_android.go
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/pkg/os/file_android.go	Sat Jun 29 10:51:01 2013 +0200
@@ -0,0 +1,16 @@
+// Copyright 2012 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// +build android,linux
+
+package os
+
+// TempDir returns the default directory to use for temporary files.
+func TempDir() string {
+	dir := Getenv("TMPDIR")
+	if dir == "" {
+		dir = "/data/local/tmp"
+	}
+	return dir
+}
diff -r 7fb1d28d575f src/pkg/os/file_non_android.go
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/pkg/os/file_non_android.go	Sat Jun 29 10:51:01 2013 +0200
@@ -0,0 +1,16 @@
+// Copyright 2012 The Go Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+// +build darwin freebsd !android,linux netbsd openbsd
+
+package os
+
+// TempDir returns the default directory to use for temporary files.
+func TempDir() string {
+	dir := Getenv("TMPDIR")
+	if dir == "" {
+		dir = "/tmp"
+	}
+	return dir
+}
diff -r 7fb1d28d575f src/pkg/os/file_unix.go
--- a/src/pkg/os/file_unix.go	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/os/file_unix.go	Sat Jun 29 10:51:01 2013 +0200
@@ -273,12 +273,3 @@
 
 	return name
 }
-
-// TempDir returns the default directory to use for temporary files.
-func TempDir() string {
-	dir := Getenv("TMPDIR")
-	if dir == "" {
-		dir = "/tmp"
-	}
-	return dir
-}
diff -r 7fb1d28d575f src/pkg/os/user/lookup_stubs.go
--- a/src/pkg/os/user/lookup_stubs.go	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/os/user/lookup_stubs.go	Sat Jun 29 10:51:01 2013 +0200
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build !cgo,!windows
+// +build !cgo,!windows android
 
 package user
 
diff -r 7fb1d28d575f src/pkg/os/user/lookup_unix.go
--- a/src/pkg/os/user/lookup_unix.go	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/os/user/lookup_unix.go	Sat Jun 29 10:51:01 2013 +0200
@@ -2,7 +2,7 @@
 // Use of this source code is governed by a BSD-style
 // license that can be found in the LICENSE file.
 
-// +build darwin freebsd linux netbsd openbsd
+// +build darwin freebsd !android,linux netbsd openbsd
 // +build cgo
 
 package user
diff -r 7fb1d28d575f src/pkg/runtime/cgo/cgo.go
--- a/src/pkg/runtime/cgo/cgo.go	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/runtime/cgo/cgo.go	Sat Jun 29 10:51:01 2013 +0200
@@ -9,18 +9,6 @@
 */
 package cgo
 
-/*
-
-#cgo darwin LDFLAGS: -lpthread
-#cgo freebsd LDFLAGS: -lpthread
-#cgo linux LDFLAGS: -lpthread
-#cgo netbsd LDFLAGS: -lpthread
-#cgo openbsd LDFLAGS: -lpthread
-#cgo windows LDFLAGS: -lm -mthreads
-
-#cgo CFLAGS: -Wall -Werror
-
-*/
 import "C"
 
 // Supports _cgo_panic by converting a string constant to an empty
diff -r 7fb1d28d575f src/pkg/runtime/cgo/cgo_android_arm.c
--- a/src/pkg/runtime/cgo/cgo_android_arm.c	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/runtime/cgo/cgo_android_arm.c	Sat Jun 29 10:51:01 2013 +0200
@@ -3,7 +3,6 @@
 // license that can be found in the LICENSE file.
 
 // +build android
-
 #include "../runtime.h"
 #include "../cgocall.h"
 
diff -r 7fb1d28d575f src/pkg/runtime/cgo/cgo_flags.go
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/pkg/runtime/cgo/cgo_flags.go	Sat Jun 29 10:51:01 2013 +0200
@@ -0,0 +1,16 @@
+// Copyright 2012 The Go Authors.  All rights reserved.
+// Use of this source code is governed by a BSD-style
+// license that can be found in the LICENSE file.
+
+package cgo
+
+/*
+#cgo darwin LDFLAGS: -lpthread
+#cgo freebsd LDFLAGS: -lpthread
+#cgo linux,!android LDFLAGS: -lpthread
+#cgo linux,android LDFLAGS: -llog
+#cgo netbsd LDFLAGS: -lpthread
+#cgo openbsd LDFLAGS: -lpthread
+#cgo windows LDFLAGS: -lm -mthreads
+*/
+import "C"
diff -r 7fb1d28d575f src/pkg/runtime/cgo/gcc_android_arm.c
--- a/src/pkg/runtime/cgo/gcc_android_arm.c	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/runtime/cgo/gcc_android_arm.c	Sat Jun 29 10:51:01 2013 +0200
@@ -11,6 +11,7 @@
 #include <stdlib.h>
 #include <stdio.h>
 #include <string.h> // strerror
+#include <android/log.h>
 #include "libcgo.h"
 
 static pthread_key_t k1;
@@ -22,53 +23,63 @@
 void
 x_cgo_tls_setup(void **tlsoffset, void **tlsbase)
 {
-	pthread_key_t tofree[128], prev_k, k;
+	pthread_key_t tofree[50], prev_k, k;
 	int i, ntofree;
+	void **tls1, **tls2;
 
+	// tlsbase is the tls base address used by runtime.save_gm
+	// and runtime.load_gm. They offset the base address with 8,
+	// so we'll do that too.
+	tlsbase = (void **)(((char *)tlsbase) + 8);
 	/*
 	 * Allocate thread-local storage slots for m, g.
 	 *
-	 * The linux/arm linker puts the TLS offset for our TLS space in
-	 * runtime.tlsgm. However, the Android linker does not support TLS
-	 * relocations, so we'll mimic the linker by finding two
-	 * consecutive TLS slots with pthread_key_create and assign the
-	 * offset from the TLS base to runtime.tlsgm.
+	 * The linux linker use R_ARM_TLS_IE32 relocations to puts the TLS
+	 * offset for our TLS space into runtime.tlsgm. However, the Android
+	 * linker does not support TLS relocations, so we'll mimic the linker
+	 * by finding two consecutive TLS slots with pthread_key_create and
+	 * assign the offset from the TLS base to runtime.tlsgm.
 	 */
-	if(pthread_key_create(&prev_k, nil) < 0) {
-		fprintf(stderr, "runtime/cgo: pthread_key_create failed\n");
+	if(pthread_key_create(&prev_k, nil) != 0) {
+		__android_log_print(ANDROID_LOG_ERROR, "Go runtime", "runtime/cgo: pthread_key_create failed");
 		abort();
 	}
 	ntofree = 0;
 	while(1) {
-		if(pthread_key_create(&k, nil) < 0) {
-			fprintf(stderr, "runtime/cgo: pthread_key_create failed\n");
+		if(pthread_key_create(&k, nil) != 0) {
+			__android_log_print(ANDROID_LOG_ERROR, "Go runtime", "runtime/cgo: pthread_key_create failed");
 			abort();
 		}
 		pthread_setspecific(prev_k, (void*)magic1);
 		pthread_setspecific(k, (void*)magic2);
 		for(i=0; i<nelem(tofree); i++) {
-			if((*(tlsbase + i) == (void*)magic1 && *(tlsbase + i + 1) == (void*)magic2) ||
-				(*(tlsbase + i) == (void*)magic2 && *(tlsbase + i + 1) == (void*)magic1)) {
+			tls1 = tlsbase + i;
+			tls2 = tlsbase + i + 1;
+			if((*tls1 == (void*)magic1 && *tls2 == (void*)magic2) ||
+				(*tls1 == (void*)magic2 && *tls2 == (void*)magic1)) {
 				k1 = prev_k;
 				k2 = k;
-				*tlsoffset = (void*)i + 8;
-				break;
+				*tlsoffset = (void*)(i*sizeof(void *));
+				goto done;
 			}
 		}
 		pthread_setspecific(prev_k, 0);
 		pthread_setspecific(k, 0);
 		if(ntofree >= nelem(tofree)) {
-			fprintf(stderr, "runtime/cgo: could not obtain pthread_keys\n");
-			fprintf(stderr, "\ttried");
+			__android_log_print(ANDROID_LOG_ERROR, "Go runtime", "runtime/cgo: could not obtain pthread_keys");
+			__android_log_print(ANDROID_LOG_ERROR, "Go runtime", "runtime/cgo: tried:");
 			for(i=0; i<ntofree; i++)
-				fprintf(stderr, " %#x", (unsigned)tofree[i]);
-			fprintf(stderr, "\n");
+				__android_log_print(ANDROID_LOG_ERROR, "Go runtime", " %#x", (unsigned)tofree[i]);
 			abort();
 		}
 		tofree[ntofree++] = prev_k;
 		prev_k = k;
 	}
 
+done:
+	pthread_setspecific(prev_k, 0);
+	pthread_setspecific(k, 0);
+
 	/*
 	 * We got the keys we wanted.  Free the others.
 	 */
diff -r 7fb1d28d575f src/pkg/runtime/malloc.goc
--- a/src/pkg/runtime/malloc.goc	Sat Jun 29 10:21:58 2013 +0200
+++ b/src/pkg/runtime/malloc.goc	Sat Jun 29 10:51:01 2013 +0200
@@ -293,7 +293,7 @@
 
 uintptr runtime·sizeof_C_MStats = sizeof(MStats);
 
-#define MaxArena32 (2U<<30)
+#define MaxArena32 (2U<<28)
 
 void
 runtime·mallocinit(void)
